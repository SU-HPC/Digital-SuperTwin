import os
import sys
import json
import requests

from grafanalib.core import Dashboard
from grafanalib._gen import DashboardEncoder

import uuid

##These should be in a config file
grafana_api_key = "eyJrIjoiM1JDaHR3Y1VENzFtSXZsNTh0Mzh0ZFpGRWhCdENvTDAiLCJuIjoiZHQwIiwiaWQiOjF9"
grafana_server = "localhost:3000"

glob_y = -7
glob_panel_id = 1

glob_id = 80

def next_y():
    global glob_y
    glob_y += 7
    
    return glob_y

def next_panel_id():
    global glob_panel_id
    glob_panel_id += 1

    return glob_panel_id

def next_dash_id():
    global glob_id

    glob_id += 1

    return glob_id


def upload_to_grafana(json, server, api_key, verify=True):
    
    '''
    upload_to_grafana tries to upload dashboard to grafana and prints response    
    :param json - dashboard json generated by grafanalib
    :param server - grafana server name
    :param api_key - grafana api key with read and write privileges
    '''
    
    headers = {'Authorization': f"Bearer {api_key}", 'Content-Type': 'application/json'}
    r = requests.post(f"http://{server}/api/dashboards/db", data=json, headers=headers, verify=verify)
    # TODO: add error handling
    # TODO: return and read uid and url, add it to observation digital twin
    print(f"{r.status_code} - {r.content}")
    return dict(r.json())

def get_dashboard_json(dashboard, overwrite, message="Updated by grafanalib"):
    '''
    get_dashboard_json generates JSON from grafanalib Dashboard object
    :param dashboard - Dashboard() created via grafanalib
    '''

    # grafanalib generates json which need to pack to "dashboard" root element
    return json.dumps(
        {
            "dashboard": dashboard,
            #"dashboard": dashboard.to_json_data(),
            "overwrite": overwrite,
            "message": message
        }, sort_keys=True, indent=2, cls=DashboardEncoder)


def template_dict(observation_id, time_from, time_to):

    print("time_from:", time_from)
    print("time_to:", time_to)
    
    _template = {}

    _template["id"] = None ##to_get: id
    #_template["id"] = next_dash_id() ##to_get: id
    _template["timepicker"] = {}
    _template["timezone"] = ""
    _template["title"] = "TEMPLATE-" + observation_id ##param: title
    #_template["title"] = str(uuid.uuid4()) ##param: title
    _template["uid"] = None ##to_get: uid
    #_template["uid"] = str(uuid.uuid4()) ##to_get: uid
    _template["version"] = 0
    _template["weekStart"] = ""
    _template["schemaVersion"] = 37
    _template["style"] = "dark"
    _template["tags"] = []
    _template["editable"] = True
    _template["graphTooltip"] = 0
    _template["links"] = []
    _template["fiscalYearStartMonth"] = 0
    _template["liveNow"] = False
    #_template["refresh"] = "1s" ##Not exist in example
    
    _template["templating"] = {}
    _template["templating"]["list"] = []

    _template["time"] = {}
    _template["time"]["from"] = "now-5m" ##param: time-from
    _template["time"]["to"] = "now"      ##param: time-to

    #_template["time"]["from"] = str(time_from) ##param: time-from
    #_template["time"]["to"] = str(time_to)     ##param: time-to
    

    _template["annotations"] = {}
    _template["annotations"]["list"] = []
    lzd = {} ##list zero dict, default list
    lzd["builtIn"] = 1
    lzd["enable"] = True
    lzd["hide"] = True
    lzd["iconColor"] = "rgba(0, 211, 255, 1)"
    #lzd["name"] = "Annotations & Alerts"
    lzd["name"] = str(uuid.uuid4())
    lzd["type"] = "dashboard"
    
    lzd["datasource"] = {}
    lzd["datasource"]["type"] = "grafana"
    lzd["datasource"]["uid"] = "-- Grafana --"

    lzd["target"] = {}
    lzd["target"]["limit"] = 100
    lzd["target"]["matchAny"] = False
    lzd["target"]["tags"] = []
    lzd["target"]["type"] = "dashboard"
    _template["annotations"]["list"].append(lzd)

    _template["panels"] = []

    return _template


def add_query(_pd, measurement, fields, observation_id):

    next_refid = 65

    for field in fields:

        #print("field:", field)
        
        _qd = {} ##query dictionary
        #_qd["alias"] = field.strip("_")
        _qd["measurement"] = measurement
        _qd["orderByTime"] = "ASC"
        _qd["policy"] = "default"
        _qd["query"] = ""
        _qd["resultFormat"] = "time_series"
        _qd["hide"] = False
        _qd["tags"] = []
        _qd["timeField"] = "@timestamp"
        #_qd["tags"] = [{"key": "tag", "value": observation_id, "operator": "="}]
        
        _qd["refId"] = str(chr(next_refid))
        next_refid += 1

        _qd["bucketAggs"] = [{"field": "@timestamp", "id": "2",
                              "settings": {"interval": "auto"},
                              "type": "date_histogram"}]

        _qd["datasource"] = {}
        _qd["datasource"]["type"] = "influxdb"
        _qd["datasource"]["uid"] = _pd["datasource"]["uid"] ##Same with panel, guess why?

        _qd["groupBy"] = [{"params": ["1s"], "type": "time"}, {"params": ["null"], "type": "fill"}]

        _qd["metrics"] = [{"id": "1", "type": "count"}]

        _qd["select"] = [[{"params": [field], "type": "field"}, {"params": [], "type": "last"}]]
        
        _pd["targets"].append(_qd)
    next_refid = 65
        
    return _pd


def add_panel(measurement, fields, observation_id):

    _pd = {} ##Panel dictionary
    _pd["title"] = measurement ##param: panel title
    _pd["type"] = "timeseries"
    _pd["transparent"] = True
    _pd["description"] = ""
    _pd["id"] = next_panel_id()
    
    _pd["datasource"] = {}
    _pd["datasource"]["type"] = "influxdb"
    _pd["datasource"]["uid"] = "54U16937k" ##param: influxdb id, need to get it from 'twin'


    _pd["fieldConfig"] = {}
    _pd["fieldConfig"]["defaults"] = {}
    _pd["fieldConfig"]["defaults"]["color"] = {}
    _pd["fieldConfig"]["defaults"]["color"]["mode"] = "palette-classic"
    
    _pd["fieldConfig"]["defaults"]["custom"] = {}
    _pd["fieldConfig"]["defaults"]["custom"]["axisCenteredZero"] = False
    _pd["fieldConfig"]["defaults"]["custom"]["axisColorMode"] = "text"
    _pd["fieldConfig"]["defaults"]["custom"]["axisLabel"] = ""
    _pd["fieldConfig"]["defaults"]["custom"]["axisPlacement"] = "auto"
    _pd["fieldConfig"]["defaults"]["custom"]["barAlignment"] = 0
    _pd["fieldConfig"]["defaults"]["custom"]["drawStyle"] = "line"
    _pd["fieldConfig"]["defaults"]["custom"]["fillOpacity"] = 0
    _pd["fieldConfig"]["defaults"]["custom"]["gradientMode"] = "none"

    _pd["fieldConfig"]["defaults"]["custom"]["hidefrom"] = {}
    _pd["fieldConfig"]["defaults"]["custom"]["hidefrom"]["legend"] = False
    _pd["fieldConfig"]["defaults"]["custom"]["hidefrom"]["tooltip"] = False
    _pd["fieldConfig"]["defaults"]["custom"]["hidefrom"]["viz"] = False

    _pd["fieldConfig"]["defaults"]["custom"]["lineInterpolation"] = "linear"
    _pd["fieldConfig"]["defaults"]["custom"]["lineWidth"] = 1
    _pd["fieldConfig"]["defaults"]["custom"]["pointSize"] = 5

    _pd["fieldConfig"]["defaults"]["custom"]["scaleDistribution"] = {}
    _pd["fieldConfig"]["defaults"]["custom"]["scaleDistribution"]["type"] = "linear"

    _pd["fieldConfig"]["defaults"]["custom"]["showPoints"] = "auto"
    _pd["fieldConfig"]["defaults"]["custom"]["spanNulls"] = False

    _pd["fieldConfig"]["defaults"]["custom"]["stacking"] = {}
    _pd["fieldConfig"]["defaults"]["custom"]["stacking"]["group"] = "A"
    _pd["fieldConfig"]["defaults"]["custom"]["stacking"]["mode"] = "none"

    _pd["fieldConfig"]["defaults"]["custom"]["thresholdStyle"] = {}
    _pd["fieldConfig"]["defaults"]["custom"]["thresholdStyle"]["mode"] = "off"

    _pd["fieldConfig"]["defaults"]["mappings"] = []

    _pd["fieldConfig"]["defaults"]["thresholds"] = {}
    _pd["fieldConfig"]["defaults"]["thresholds"]["mode"] = "absolute"
    
    _pd["fieldConfig"]["defaults"]["thresholds"]["steps"] = []
    _sd0 = {"color": "green", "value": None}
    _sd1 = {"color": "red", "value": 80}
    _pd["fieldConfig"]["defaults"]["thresholds"]["steps"].append(_sd0)
    _pd["fieldConfig"]["defaults"]["thresholds"]["steps"].append(_sd1)

    _pd["fieldConfig"]["overrides"] = []

    _pd["gridPos"] = {"h": 7, "w": 24, "x": 0, "y": next_y()}
    _pd["targets"] = []
    
    
    #fields = ["_sda"]
    #print("_pd, before:", _pd)
    _pd = add_query(_pd, measurement, fields, observation_id)
    #print("###############################")
    #print("_pd, after:", _pd)
    
    return _pd

##NEED TO REWRITE PANEL THING
##NEED TO REWRITE SELECT-QUERY PART - PERHAPS IT WAS ELASTIC SEARCH, DATE HISTOGRAM THING

def quick_panel(measurement, observation_id_raw):

    observation_id = "_observation_" ##it now become tag
    observation_id += observation_id_raw
    
    p_json = {
        "id": next_panel_id(),
        "gridPos": {
            "h": 7,
            "w": 24,
            "x": 0,
            "y": next_y()
        },
        "type": "timeseries",
        "title": measurement,
        "datasource": {
            "uid": "54U16937k",
            "type": "influxdb"
        },
        "fieldConfig": {
            "defaults": {
                "custom": {
                    "drawStyle": "line",
                    "lineInterpolation": "linear",
                    "barAlignment": 0,
                    "lineWidth": 1,
                    "fillOpacity": 4,
                    "gradientMode": "opacity",
                    "spanNulls": False,
                    "showPoints": "never",
                    "pointSize": 4,
                    "stacking": {
                        "mode": "none",
                        "group": "A"
                    },
                    "axisPlacement": "auto",
                    "axisLabel": "",
                    "axisColorMode": "text",
                    "scaleDistribution": {
                        "type": "linear"
                    },
                    "axisCenteredZero": False,
                    "hideFrom": {
                        "tooltip": False,
                        "viz": False,
                        "legend": False
                    },
                    "thresholdsStyle": {
                        "mode": "off"
                    },
                    "lineStyle": {
                        "fill": "solid"
                    }
                },
                "color": {
                    "mode": "palette-classic"
                },
                "mappings": [],
                "thresholds": {
                    "mode": "absolute",
                    "steps": [
                        {
                            "color": "green",
                            "value": None
                        },
                        {
                            "color": "red",
                            "value": 80
                        }
                    ]
                }
            },
            "overrides": []
        },
        "targets": [
            {
                "bucketAggs": [
                    {
                        "field": "@timestamp",
                        "id": "2",
                        "settings": {
                            "interval": "auto"
                        },
                        "type": "date_histogram"
                    }
                ],
                "datasource": {
                    "type": "influxdb",
                    "uid": "54U16937k"
                },
                "groupBy": [
                    {
                        "params": [
                            "1s"
                        ],
                        "type": "time"
                    },
                    {
                        "params": [
                            "null"
                        ],
                        "type": "fill"
                    }
                ],
                "hide": False,
                "measurement": measurement,
                "metrics": [
                    {
                        "id": "1",
                        "type": "count"
                    }
                ],
                "orderByTime": "ASC",
                "policy": "default",
                "query": "",
                "refId": "A",
                "resultFormat": "time_series",
                "select": [
                    [
                        {
                            "type": "field",
                            "params": [
                                "_cpu0"
                            ]
                        },
                        {
                            "type": "mean",
                            "params": []
                        }
                    ]
                ],
                "tags": [
                    {
                        "key": "tag",
                        "value": observation_id,
                        "operator": "="
                    }
                ],
                "timeField": "@timestamp",
                "alias": "degree"
            },
            {
                "bucketAggs": [
                    {
                        "field": "@timestamp",
                        "id": "2",
                        "settings": {
                            "interval": "auto"
                        },
                        "type": "date_histogram"
                    }
                ],
                "datasource": {
                    "type": "influxdb",
                    "uid": "54U16937k"
                },
                "groupBy": [
                    {
                        "params": [
                            "1s"
                        ],
                        "type": "time"
                    },
                    {
                        "params": [
                            "null"
                        ],
                        "type": "fill"
                    }
                ],
                "hide": False,
                "measurement": measurement,
                "metrics": [
                    {
                        "id": "1",
                        "type": "count"
                    }
                ],
                "orderByTime": "ASC",
                "policy": "default",
                "query": "",
                "refId": "B",
                "resultFormat": "time_series",
                "select": [
                    [
                        {
                            "type": "field",
                            "params": [
                                "_cpu1"
                            ]
                        },
                        {
                            "type": "mean",
                            "params": []
                        }
                    ]
                ],
                "tags": [
                    {
                        "key": "tag",
                        "value": observation_id,
                        "operator": "="
                    }
                ],
                "timeField": "@timestamp",
                "alias": "rcm"
            },
            {
                "bucketAggs": [
                    {
                        "field": "@timestamp",
                        "id": "2",
                        "settings": {
                            "interval": "auto"
                        },
                        "type": "date_histogram"
                    }
                ],
                "datasource": {
                    "type": "influxdb",
                    "uid": "54U16937k"
                },
                "groupBy": [
                    {
                        "params": [
                            "1s"
                        ],
                        "type": "time"
                    },
                    {
                        "params": [
                            "null"
                        ],
                        "type": "fill"
                    }
                ],
                "hide": False,
                "measurement": measurement,
                "metrics": [
                    {
                        "id": "1",
                        "type": "count"
                    }
                ],
                "orderByTime": "ASC",
                "policy": "default",
                "query": "",
                "refId": "C",
                "resultFormat": "time_series",
                "select": [
                    [
                        {
                            "type": "field",
                            "params": [
                                "_cpu2"
                            ]
                        },
                        {
                            "type": "mean",
                            "params": []
                        }
                    ]
                ],
                "tags": [
                    {
                        "key": "tag",
                        "value": observation_id,
                        "operator": "="
                    }
                ],
                "timeField": "@timestamp",
                "alias": "none"
            },
            {
                "bucketAggs": [
                    {
                        "field": "@timestamp",
                        "id": "2",
                        "settings": {
                            "interval": "auto"
                        },
                        "type": "date_histogram"
                    }
                ],
                "datasource": {
                    "type": "influxdb",
                    "uid": "54U16937k"
                },
                "groupBy": [
                    {
                        "params": [
                            "1s"
                        ],
                        "type": "time"
                    },
                    {
                        "params": [
                            "null"
                        ],
                        "type": "fill"
                    }
                ],
                "hide": False,
                "measurement": measurement,
                "metrics": [
                    {
                        "id": "1",
                        "type": "count"
                    }
                ],
                "orderByTime": "ASC",
                "policy": "default",
                "query": "",
                "refId": "D",
                "resultFormat": "time_series",
                "select": [
                    [
                        {
                            "type": "field",
                            "params": [
                                "_cpu3"
                            ]
                        },
                        {
                            "type": "mean",
                            "params": []
                        }
                    ]
                ],
                "tags": [
                    {
                        "key": "tag",
                        "value": observation_id,
                        "operator": "="
                    }
                ],
                "timeField": "@timestamp",
                "alias": "random"
            }
        ],
        "transparent": True,
        "options": {
            "tooltip": {
                "mode": "single",
                "sort": "none"
            },
            "legend": {
                "showLegend": True,
                "displayMode": "list",
                "placement": "bottom",
                "calcs": []
            }
        },
        "description": ""
    }

    return p_json
    
def main(measurements_fields_array, observation_id, time_from, time_to):
    
    server = grafana_server
    api_key = grafana_api_key

    #print(measurements_fields_dict)
    #exit(1)

    print("measurements_fields_array:", measurements_fields_array)

    '''
    generated = {}
    for key in measurements_fields_dict:
    
        empty_dash = template_dict()
        empty_dash["panels"] = []

        for measurement in measurements_fields_dict[key]:
            empty_dash["panels"].append(add_panel(measurement, [key]))

        if(len(empty_dash["panels"]) != 0):
            json_dash_obj = get_dashboard_json(empty_dash, overwrite = False)
            #print(json_dash_obj)
            g_url = upload_to_grafana(json_dash_obj, grafana_server, grafana_api_key)
            generated[key] = g_url['url']
    '''

    empty_dash = template_dict(observation_id, time_from, time_to)
    empty_dash["panels"] = []
    
    for item in measurements_fields_array:
        empty_dash["panels"].append(quick_panel(item[0], observation_id))
        #empty_dash["panels"].append(quick_panel(item[0], item[1], observation_id))
        
    json_dash_obj = get_dashboard_json(empty_dash, overwrite = False)
    g_url = upload_to_grafana(json_dash_obj, grafana_server, grafana_api_key)
        
    return g_url
    #measurement = "disk_dev_write" #param: measurement
    #measurement2 = "disk_dev_read" #param: measurement
    #fields = ["_sda", "_nvme0n1", "_nvme1n1"]
    
    #empty_dash["panels"].append(add_panel("disk_dev_write", fields))
    #empty_dash["panels"].append(add_panel("disk_dev_write_merge", fields))
    #empty_dash["panels"].append(add_panel("disk_dev_read", fields))
    #empty_dash["panels"].append(add_panel("disk_dev_read_merge", fields))
    

if __name__ == "__main__":

    main()
