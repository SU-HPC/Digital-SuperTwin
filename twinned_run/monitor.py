import sys
sys.path.append("../create_dt")
sys.path.append("../system_query")

import detect_utils
import create_dt
import generate_dt
import remote_probe
import initiate
import instantiate

##
import ex_dashboard

from grafanalib.core import Dashboard
from grafanalib._gen import DashboardEncoder
import json
import requests
from os import getenv

import webbrowser

def get_dashboard_json(dashboard, overwrite=False, message="Updated by grafanlib"):
    '''
    get_dashboard_json generates JSON from grafanalib Dashboard object

    :param dashboard - Dashboard() created via grafanalib
    '''

    # grafanalib generates json which need to pack to "dashboard" root element
    return json.dumps(
        {
            "dashboard": dashboard,
            #"dashboard": dashboard.to_json_data(),
            "overwrite": overwrite,
            "message": message
        }, sort_keys=True, indent=2, cls=DashboardEncoder)


def upload_to_grafana(json, server, api_key, verify=True):
    '''
    upload_to_grafana tries to upload dashboard to grafana and prints response

    :param json - dashboard json generated by grafanalib
    :param server - grafana server name
    :param api_key - grafana api key with read and write privileges
    '''

    headers = {'Authorization': f"Bearer {api_key}", 'Content-Type': 'application/json'}
    r = requests.post(f"http://{server}/api/dashboards/db", data=json, headers=headers, verify=verify)
    # TODO: add error handling
    print(f"{r.status_code} - {r.content}")
    

def main():

    
    hostName, hostIP, hostProbFile = remote_probe.main()
    #print("in m: ", "hostname:", hostName, "hostIP:", hostIP, "hostProbFile:", hostProbFile)

    monitoringMetricsConf = input("Monitoring metrics configuration: ")
    monitorPID = initiate.main(hostName, hostIP, hostProbFile, monitoringMetricsConf)
    print("A daemon is sampling", hostName, "with PID", monitorPID)
    


    grafana_api_key = "eyJrIjoiVTFGMnd2Z3Axb1BwdldOZ2IzYUFoSVdzMThRVW81aGEiLCJuIjoiZHRkbC1kb2NrZXIiLCJpZCI6MX0="
    grafana_server = "host.docker.internal:3000"
    
    #my_dashboard = Dashboard(title="dolap" + "--created via API", uid='abifsd')
    #my_dashboard_json = get_dashboard_json(my_dashboard, overwrite=True)
    #my_dashboard_json = ex_dashboard.ret_ex()
    with open("example_dash.json", 'r') as j:
        my_dashboard_json = json.loads(j.read())
    #payload = {"Dashboard": my_dashboard}
    my_dashboard_json_obj = get_dashboard_json(my_dashboard_json, overwrite=True)
    upload_to_grafana(my_dashboard_json_obj, grafana_server, grafana_api_key)

    webbrowser.open('http://host.docker.internal:3000/d/abifsd')
    

if __name__ == "__main__":

    main()
