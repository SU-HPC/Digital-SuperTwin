# File format:
# File consists of one or more groups of PMUs and the events that go with them
# ["PMU identification string"]
#   EVENT_NAME [CPU OPTION]
# where the optional CPU OPTION can be:
#    cpu to add the counter to all cpus in the system 
#    cpu_rr to add to one of the cpus in a round-robin allocation strategy
#    node to add the counter to the first cpu in each numa node
#    node_rr to add the counter to the cpus in each numa node in a round-robin allocation strategy
#    [N] where N is the numerical digit of the CPU index
#
# if the CPU option is absent it defaults to all cpus.
#
# Kernel exported PMUs can be specified in this file too under [dynamic]
# section. The PMUs exported from the kernel can be found in
# /sys/bus/event_source/devices
# and its corresponding event can be found under "events" directory inside
# the PMU directory.
# For e.g., if an event "bar"  is desired to monitored which is found here :
# /sys/bus/event_source/devices/foo/events/bar
# Then, it needs to be mentioned under [dynamic] as :
# [dynamic]
# foo.bar
#
# If not specified like above, a user will continue to see the event but
# will not be able to monitor it.
#
# For events, specified under dynamic section, the cpuconfig can also
# be specified along with the event.
# For eg:
# [dynamic]
# foo.bar [CPU NUMBER]
#
# If no cpu number is specified for events under [dynamic], then the cpumask
# specified in /sys/bus/event_source/devices/ for that event is considered.
# Suppose if cpumask is also not mentioned in /sys/ then the event is monitored
# for all cpus in the system.
#
# For hv_24x7 core level events, we can't directly read values as those events need
# additional parameter. User can specify these parameter in the following
# format:
#
# EVENT_NAME core:<core number> domain:<domain number> lpar:<lpar id>
# Here core and domain are compulsory parameter which need to be provided
# by user otherwise user will continue to see these events in list but will not be
# able to monitor it. Lpar value will be consider only if domain > 2 otherwise
# it will be ignore.
#
# To monitor hv_gpci events, user need to specify parameters based on event type.
# User can specify them in the following format:
#
# EVENT_NAME1 phys_processor_idx:<phys processor id>
# EVENT_NAME2 partition_id:<partition id>
# EVENT_NAME3 hw_chip_id:<chip number>
# EVENT_NAME4 sibling_part_id:<sibling_part_id>
# User won't be able to monitor events until it provide needed parameter data
#
# For derived events :
# [event:derived]
#   EVENT_NAME [CPU OPTION] [scale|perf_scale]
# where the CPU OPTION must match for all the events in a derived event,
# scale is a floating value and can be used to scale the event values or
# perf_scale can be used where it is known that there is a scale for a
# certain event provided in
# /sys/bus/event_source/devices/<device>/events/<event>.scale
#
# Derived events also have the capability of alternate event groups.
# [event:derived]
#    EVENT_NAME1 [CPU OPTION] [scale|perf_scale]
#    EVENT_NAME2 [CPU OPTION] [scale|perf_scale]
#    ||
#    EVENT_NAME3 [CPU OPTION] [scale|perf_scale]
#    EVENT_NAME4 [CPU OPTION] [scale|perf_scale]
#    ||
#    ...
# If specified like above, depending on the availability of the events,
# only one group will be activated ("||" is the group separator).
# First group with all the events available will be activated.
#
#
# Typically, users can specify perf events using just the event name but
# in case the event name is not identified by libpfm, they can directly
# specify the raw event code in the following format:
#   RAW:EVENT_NAME rawcode=[RAW_EVENT_CODE]
# where the RAW_EVENT_CODE is a hexadecimal event code
# It should be noted that the raw event codes are heavily architecture
# dependent and their meanings might also vary across revisions of the
# same architecture.
#



# Fallthough case: the perf PMU is the generic one that is likely to be always
# present.  The cycles and instructions counters likewise should be there
[skx]
CPU_CLK_THREAD_UNHALTED:THREAD_P cpu
MEM_INST_RETIRED:ALL_LOADS cpu
MEM_INST_RETIRED:ALL_STORES cpu
L1D:REPLACEMENT cpu
L2-RQSTS:CODE_RD_MISS cpu
CYCLE_ACTIVITY:STALLS_L1D_MISS cpu
CYCLE_ACTIVITY:STALLS_L2_MISS cpu 
CYCLE_ACTIVITY:STALLS_L3_MISS cpu
CYCLE_ACTIVITY:STALLS_MEM_ANY cpu
CYCLE_ACTIVITY:CYCLES_L1D_MISS cpu
CYCLE_ACTIVITY:CYCLES_L2_MISS cpu 
CYCLE_ACTIVITY:CYCLES_L3_MISS cpu
CYCLE_ACTIVITY:CYCLES_MEM_ANY cpu
FP_ARITH_INST_RETIRED:SCALAR_DOUBLE cpu
FP_ARITH_INST_RETIRED:SCALAR_SINGLE cpu
FP_ARITH_INST_RETIRED:128B_PACKED_DOUBLE cpu
FP_ARITH_INST_RETIRED:128B_PACKED_SINGLE cpu
FP_ARITH_INST_RETIRED:256B_PACKED_DOUBLE cpu
FP_ARITH_INST_RETIRED:256B_PACKED_SINGLE cpu
FP_ARITH_INST_RETIRED:512B_PACKED_DOUBLE cpu
FP_ARITH_INST_RETIRED:512B_PACKED_SINGLE cpu

#[ix86arch]
LLC_REFERENCES cpu

#[skx_unc_imc0]
UNC_M_CAS_COUNT:RD cpu 
UNC_M_CAS_COUNT:WR cpu

RAPL_ENERGY_PKG
RAPL_ENERGY_DRAM


