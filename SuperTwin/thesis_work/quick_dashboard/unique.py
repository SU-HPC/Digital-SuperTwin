import sys
sys.path.append("../probing/benchmarks")
sys.path.append("../probing")

import os
import sys
import json
import requests

from grafanalib.core import Dashboard
from grafanalib._gen import DashboardEncoder

import uuid

import numpy as np

import parse_adcarm_benchmark


import plotly.graph_objects as go
import plotly.io as io


import matplotlib.colors as mc
import colorsys

##
#import stream_benchmark
#import hpcg_benchmark
##

vis_all = []
vis_L1s = []
vis_L2s = []
vis_L3s = []
vis_DRAMs = []
vis_threads = {}

#colors = ["#75eab6", "#2d747a", "#20d8fd", "#c0583d", "#bccd97", "#b1e632", "#57832e", "#efaa79"]
#colors = ["#56ebd3", "#528e8c", "#c5df72", "#194f46", "#b4ddd4", "#9f5553"] ##This is, SO BEAUTIFUL
colors = ["#399283", "#9f1845", "#4cf32c", "#3c5472", "#cadba5", "#02531d", "#56ebd3", "#d11f0b", "#a0e85b", "#3163d8", "#b3d9fa", "#82400f", "#ef8ead", "#31a62e", "#ff0087", "#809b31"]

next_color = -1

def get_next_color():
    global next_color
    
    next_color += 1

    return colors[next_color]

def round_power_of_2(number):
    if number > 1:
        for i in range(1, int(number)):
            if (2 ** i >= number):
                return 2 ** i
    else:
        return 1

def carm_eq(ai, bw, fp):
    #print("Returning:", np.minimum(ai*bw, fp))
    return np.minimum(ai*bw, fp)

##These should be in a config file
grafana_api_key = "eyJrIjoiM1JDaHR3Y1VENzFtSXZsNTh0Mzh0ZFpGRWhCdENvTDAiLCJuIjoiZHQwIiwiaWQiOjF9"
grafana_server = "localhost:3000"

glob_y = -7
glob_panel_id = 1

glob_id = 80

def next_y():
    global glob_y
    glob_y += 7
    
    return glob_y

def next_panel_id():
    global glob_panel_id
    glob_panel_id += 1

    return glob_panel_id

def next_dash_id():
    global glob_id

    glob_id += 1

    return glob_id


def upload_to_grafana(json, server, api_key, verify=True):
    
    '''
    upload_to_grafana tries to upload dashboard to grafana and prints response    
    :param json - dashboard json generated by grafanalib
    :param server - grafana server name
    :param api_key - grafana api key with read and write privileges
    '''
    
    headers = {'Authorization': f"Bearer {api_key}", 'Content-Type': 'application/json'}
    r = requests.post(f"http://{server}/api/dashboards/db", data=json, headers=headers, verify=verify)
    # TODO: add error handling
    # TODO: return and read uid and url, add it to observation digital twin
    print(f"{r.status_code} - {r.content}")
    return dict(r.json())

def get_dashboard_json(dashboard, overwrite, message="Updated by grafanalib"):
    '''
    get_dashboard_json generates JSON from grafanalib Dashboard object
    :param dashboard - Dashboard() created via grafanalib
    '''

    # grafanalib generates json which need to pack to "dashboard" root element
    return json.dumps(
        {
            "dashboard": dashboard,
            #"dashboard": dashboard.to_json_data(),
            "overwrite": overwrite,
            "message": message
        }, sort_keys=True, indent=2, cls=DashboardEncoder)


def template_dict():

    _template = {}

    _template["id"] = None ##to_get: id
    #_template["id"] = next_dash_id() ##to_get: id
    _template["timepicker"] = {}
    _template["timezone"] = ""
    _template["title"] = "TEMPLATE-" + str(uuid.uuid4()) ##param: title
    #_template["title"] = str(uuid.uuid4()) ##param: title
    _template["uid"] = None ##to_get: uid
    #_template["uid"] = str(uuid.uuid4()) ##to_get: uid
    _template["version"] = 0
    _template["weekStart"] = ""
    _template["schemaVersion"] = 37
    _template["style"] = "dark"
    _template["tags"] = []
    _template["editable"] = True
    _template["graphTooltip"] = 0
    _template["links"] = []
    _template["fiscalYearStartMonth"] = 0
    _template["liveNow"] = False
    _template["refresh"] = "1s" ##Not exist in example
    
    _template["templating"] = {}
    _template["templating"]["list"] = []

    _template["time"] = {}
    _template["time"]["from"] = "now-5m" ##param: time-from
    _template["time"]["to"] = "now"      ##param: time-to

    _template["annotations"] = {}
    _template["annotations"]["list"] = []
    lzd = {} ##list zero dict, default list
    lzd["builtIn"] = 1
    lzd["enable"] = True
    lzd["hide"] = True
    lzd["iconColor"] = "rgba(0, 211, 255, 1)"
    #lzd["name"] = "Annotations & Alerts"
    lzd["name"] = str(uuid.uuid4())
    lzd["type"] = "dashboard"
    
    lzd["datasource"] = {}
    lzd["datasource"]["type"] = "grafana"
    lzd["datasource"]["uid"] = "-- Grafana --"

    lzd["target"] = {}
    lzd["target"]["limit"] = 100
    lzd["target"]["matchAny"] = False
    lzd["target"]["tags"] = []
    lzd["target"]["type"] = "dashboard"
    _template["annotations"]["list"].append(lzd)

    _template["panels"] = []

    return _template


def return_line(ai, eq, name, color, dash):

    line = {
                    "line": {
                        "color": color,
                        "dash": dash,
                        "width": 4
                    },
                    "mode": "lines",
                    "name": name,
                    "type": "scatter",
                    "x": ai,
                    "y": eq
                }

    return line

def line_spec(color, dash):

    line = {}
    
    if(dash != ""):
        line = {
            "color": color,
            "dash": dash,
            "width": 2
        }
        
    else:
        line = {"color": color,
                "width": 2
        }
    
    return line
    

def two_templates_one(data, layout):
    
    template = {
        "id": 41,
        "gridPos": {
            "h": 17,
            "w": 13,
            "x": 0,
            "y": 0
        },
        "type": "ae3e-plotly-panel",
        "title": "Cache Aware Roofline Model",
        "datasource": {
            "type": "simpod-json-datasource",
            "uid": "yjaMegMVk"
        },
        "options": {
            "script": "console.log(data)\n\n\nreturn {};",
            "onclick": "console.log(data)\nwindow.updateVariables({query:{'var-project':'test'}, partial: true})",
            "config": {
                "displayModeBar": True,
                "locale": "en"
            },
            "data": data,
            "layout": layout
        },
        "targets": [
            {
                "alias": "",
                "bucketAggs": [
                    {
                        "field": "@timestamp",
                        "id": "2",
                        "settings": {
                            "interval": "auto"
                        },
                        "type": "date_histogram"
                    }
                ],
                "datasource": {
                    "type": "simpod-json-datasource",
                    "uid": "yjaMegMVk"
                },
                "metrics": [
                    {
                        "id": "1",
                        "type": "count"
                    }
                ],
                "payload": "",
                "query": "",
                "refId": "A",
                "target": "system_ip",
                "timeField": "@timestamp"
            }
        ],
        "transparent": True
    }

    return template
    
def all_these_lines(datalines, data, ai, thread, color):

    for_one_L1 = carm_eq(ai, data["threads"][thread]["L1"], data["threads"][thread]["FP"])
    for_one_L2 = carm_eq(ai, data["threads"][thread]["L2"], data["threads"][thread]["FP"])
    for_one_L3 = carm_eq(ai, data["threads"][thread]["L3"], data["threads"][thread]["FP"])
    for_one_DRAM = carm_eq(ai, data["threads"][thread]["DRAM"], data["threads"][thread]["FP"])

    datalines.append(return_line(ai.tolist(), for_one_L1.tolist(), "L1 - " + thread + "thr", color, ""))
    datalines.append(return_line(ai.tolist(), for_one_L2.tolist(), "L2 -" + thread + "thr" , color, "dash"))
    datalines.append(return_line(ai.tolist(), for_one_L3.tolist(), "L3 -" + thread + "thr", color, ""))
    datalines.append(return_line(ai.tolist(), for_one_DRAM.tolist(), "DRAM -" + thread + "thr", color, "dashdot"))

    return datalines

def return_traces(data, ai, thread):

    for_one_L1 = carm_eq(ai, data["threads"][thread]["L1"], data["threads"][thread]["FP"])
    for_one_L2 = carm_eq(ai, data["threads"][thread]["L2"], data["threads"][thread]["FP"])
    for_one_L3 = carm_eq(ai, data["threads"][thread]["L3"], data["threads"][thread]["FP"])
    for_one_DRAM = carm_eq(ai, data["threads"][thread]["DRAM"], data["threads"][thread]["FP"])

    return [for_one_L1, for_one_L2, for_one_L3, for_one_DRAM]

def return_subtraces(data, ai, thread, index):

    global vis_all
    global vis_threads
    global vis_L1s
    global vis_L2s
    global vis_L3s
    global vis_DRAMs
    
    for_one_L1 = carm_eq(ai, data["threads"][thread][index]["L1"], data["threads"][thread][index]["FP"])
    for_one_L2 = carm_eq(ai, data["threads"][thread][index]["L2"], data["threads"][thread][index]["FP"])
    for_one_L3 = carm_eq(ai, data["threads"][thread][index]["L3"], data["threads"][thread][index]["FP"])
    for_one_DRAM = carm_eq(ai, data["threads"][thread][index]["DRAM"], data["threads"][thread][index]["FP"])

    this_keys = data["threads"][thread][index].keys()
    name = thread + "thr"
        
    if(data["threads"][thread][index]["interleaved"] != 0):
        name += " interleaved"

    if("binding" in this_keys):
        name += " "
        name += data["threads"][thread][index]["binding"].split(" ")[3]

    if(thread in vis_threads.keys()):
        vis_threads[thread] += [True]*4
    else:
        vis_threads[thread] = []
        vis_threads[thread] += [False]*len(vis_all)
        vis_threads[thread] += [True]*4
        
    if(data["threads"][thread][index]["interleaved"] != 0 or "binding" in this_keys):
        vis_all += [False]*4
        vis_L1s += [False]*4
        vis_L2s += [False]*4
        vis_L3s += [False]*4
        vis_DRAMs += [False]*4
    else:
        vis_all += [True]*4
        vis_L1s += [True, False, False, False]
        vis_L2s += [False, True, False, False]
        vis_L3s += [False, False, True, False]
        vis_DRAMs += [False, False, False, True]
    

    return [for_one_L1, for_one_L2, for_one_L3, for_one_DRAM, name]
    

def thread_group(fig, thread, color, data, ai, ai_list):
    
    thread_lines = return_traces(data, ai, thread)
    fig.add_trace(go.Scatter(x=ai_list, y=thread_lines[0].tolist(),
                             mode = "lines", name="L1 - "+ thread + "thr", line=line_spec(color, "")))
    fig.add_trace(go.Scatter(x=ai_list, y=thread_lines[1].tolist(),
                             mode = "lines", name="L2 - "+ thread + "thr", line=line_spec(color, "dash")))
    fig.add_trace(go.Scatter(x=ai_list, y=thread_lines[2].tolist(),
                             mode = "lines", name="L3 - "+ thread + "thr", line=line_spec(color, "")))
    fig.add_trace(go.Scatter(x=ai_list, y=thread_lines[3].tolist(),
                             mode = "lines", name="DRAM - "+ thread + "thr", line=line_spec(color, "dashdot")))

    return fig


def thread_groups(fig, thread, color, data, ai, ai_list):

    thread_lines = []

    for i in range(len(data["threads"][thread])):
        thread_lines = return_subtraces(data, ai, thread, i)
        name_postfix = thread_lines[4]
        gc = get_next_color()
        fig.add_trace(go.Scatter(x=ai_list, y=thread_lines[0].tolist(),
                      mode = "lines", name="L1 - "+ name_postfix, line=line_spec(gc, "")))
        fig.add_trace(go.Scatter(x=ai_list, y=thread_lines[1].tolist(),
                      mode = "lines", name="L2 - "+ name_postfix, line=line_spec(gc, "dash")))
        fig.add_trace(go.Scatter(x=ai_list, y=thread_lines[2].tolist(),
                      mode = "lines", name="L3 - "+ name_postfix, line=line_spec(gc, "")))
        fig.add_trace(go.Scatter(x=ai_list, y=thread_lines[3].tolist(),
                      mode = "lines", name="DRAM - "+ name_postfix, line=line_spec(gc, "dashdot")))

    return fig
        
    

def grafana_layout(fig):

    fig.update_layout({
        #"legend": {
        #    "orientation": "h",
        #    "x": 0,
        #    "y": 1.3
        #},
        "margin": {
            "b": 0,
            "l": 0,
            "r": 0,
            "t": 10
        },
        "modebar": {
            "orientation": "v"
        },
        "paper_bgcolor": "rgba(0,0,0,0)",
        "plot_bgcolor": "rgba(0,0,0,0)",
        "xaxis": {
            "autorange": False,
            "dtick": 0.30102999566,
            "nticks": 32,
            "rangemode": "tozero",
            "showspikes": False,
            "title": {
                "text": "Arithmetic Intensity"
            },
            "type": "log",
            "range": [
                -1.8194309088656293,
                3.1052677216436475
            ]
        },
        "yaxis": {
            "autorange": False,
            "dtick": 0.30102999566,
            "rangemode": "tozero",
            "showspikes": False,
            "title": {
                "text": "Performance [GFlop/s]"
            },
            "type": "log",
            "range": [
                -1.2040179707535978,
                3.717236972979037
            ]
        }
    })

    return fig

def main(SuperTwin):
    
    server = grafana_server
    api_key = grafana_api_key
    
    #print(measurements_fields_dict)
    #exit(1)


    generated = {}

    ai = np.linspace(0.00390625, 2048, num=1000)
    data = parse_adcarm_benchmark.main()
    print("data:", data)
    #datalines = []

    #datalines = all_these_lines(datalines, data, ai, "1", "black")
    #datalines = all_these_lines(datalines, data, ai, "2", "firebrick")
    #datalines = all_these_lines(datalines, data, ai, "4", "magenta")
    #datalines = all_these_lines(datalines, data, ai, "8", "cyan")
    #datalines = all_these_lines(datalines, data, ai, "16", "cyan")
    #datalines = all_these_lines(datalines, data, ai, "22", "purple")
    

    print("####################################################3")
    #print("datalines:", datalines)

    empty_dash = template_dict()
    empty_dash["panels"] = []
    #empty_dash["panels"].append(template_one(datalines))

    ##Just create linechart and call template_one with data and layout
    fig = go.Figure(layout={})
    ai_list = ai.tolist()
    

    fig = thread_groups(fig, "1", colors[0], data, ai, ai_list)
    fig = thread_groups(fig, "2", colors[1], data, ai, ai_list)
    fig = thread_groups(fig, "4", colors[2], data, ai, ai_list)
    fig = thread_groups(fig, "8", colors[3], data, ai, ai_list)
    fig = thread_groups(fig, "16", colors[4], data, ai, ai_list)
    fig = thread_groups(fig, "22", colors[6], data, ai, ai_list)
    fig = thread_groups(fig, "32", colors[7], data, ai, ai_list)
    fig = thread_groups(fig, "44", colors[8], data, ai, ai_list)
    fig = thread_groups(fig, "64", colors[9], data, ai, ai_list)
    fig = thread_groups(fig, "88", colors[10], data, ai, ai_list)

    
    all_true = [True, True, True, True]
    all_false = [False, False, False, False]

    _all = all_true*6
    
    L1s = [True, False, False, False]*6
    L2s = [False, True, False, False]*6
    L3s = [False, False, True, False]*6
    DRAMs = [False, False, False, True]*6

    #print("this:", all_true*4 + all_false)
    
    
    thr_1 = all_true + all_false*5
    thr_2 = all_false + all_true + all_false*4
    thr_4 = all_false*2 + all_true + all_false*3
    thr_8 = all_false*3 + all_true + all_false*2
    thr_16 = all_false*4 + all_true + all_false
    thr_22 = all_false*5 + all_true

    '''
    buttons = [{'label': 'All',
                 'method': 'restyle',
                 'args': ['visible', _all]},
               {'label': 'L1s',
                'method': 'restyle',
                 'args': ['visible', L1s]},
               {'label': 'L2s',
                 'method': 'restyle',
                 'args': ['visible', L2s]},
               {'label': 'L3s',
                 'method': 'restyle',
                 'args': ['visible', L3s]},
               {'label': 'DRAMs',
                 'method': 'restyle',
                 'args': ['visible', DRAMs]},
               {'label': '1thr',
                 'method': 'restyle',
                 'args': ['visible', thr_1]},
               {'label': '2thr',
                 'method': 'restyle',
                 'args': ['visible', thr_2]},
               {'label': '4thr',
                 'method': 'restyle',
                 'args': ['visible', thr_4]},
               {'label': '8thr',
                 'method': 'restyle',
                 'args': ['visible', thr_8]},
               {'label': '16thr',
                 'method': 'restyle',
                 'args': ['visible', thr_16]},
               {'label': '22thr',
                 'method': 'restyle',
                 'args': ['visible', thr_22]},
    ]
    '''

    for item in vis_threads:
        thread_vis_len = len(vis_threads[item])
        difference = len(vis_all) - thread_vis_len
        vis_threads[item] += [False] * difference
    
    buttons = [{'label': 'All',
                 'method': 'restyle',
                 'args': ['visible', vis_all]},
               {'label': 'L1s',
                'method': 'restyle',
                 'args': ['visible', vis_L1s]},
               {'label': 'L2s',
                 'method': 'restyle',
                 'args': ['visible', vis_L2s]},
               {'label': 'L3s',
                 'method': 'restyle',
                 'args': ['visible', vis_L3s]},
               {'label': 'DRAMs',
                 'method': 'restyle',
                 'args': ['visible', vis_DRAMs]}]

    buttons2 = []
    for key in vis_threads.keys():
        buttons2.append({'label': key+'thr',
                        'method': 'restyle',
                        'args': ['visible', vis_threads[key]]})
    

    fig = grafana_layout(fig)


    # update layout with buttons                       
    fig.update_layout(
        updatemenus=[
            dict(
                type="buttons",
                direction="right",
                buttons = buttons,
                pad={"r": 4, "t": 4, "l": 0, "r": 4},
                showactive=True,
                x=0.1,
                xanchor="left",
                y=1.15,
                yanchor="top")
            ,
            dict(
                type="buttons",
                direction="right",
                buttons = buttons2,
                pad={"r": 4, "t": 4, "l": 0, "r": 4},
                showactive=True,
                x=0.1,
                xanchor="left",
                y=1.25,
                yanchor="top")
        ],
    )
    

    #fig.update_layout(legend_font_size=16)
    fig.update_layout(showlegend=False)
    fig.update_layout(font_size=16)
    fig.update_xaxes(showspikes=True)
    fig.update_yaxes(showspikes=True)
    fig.update_traces(hovertemplate=None)
    fig.update_layout(hovermode="x")
    dict_fig = json.loads(io.to_json(fig))
    empty_dash["panels"].append(two_templates_one(dict_fig["data"], dict_fig["layout"]))
    
    print("####################################################3")
    #print("empty_dash:", empty_dash)


    '''
    fig = go.Figure(layout={})
    fig.add_trace(go.Indicator(
    mode = "number",
    value = 32,
    number = {"prefix": "", "suffix": "kB"},
    title = {"text": "L1 Cache Size<br><span style='font-size:0.8em;color:gray'>"},
    #delta = {'reference': 400, 'relative': True},
    domain = {'row': 0, 'column': 0}))

    
    fig.add_trace(go.Indicator(
    mode = "number",
    value = 32,
    number = {"prefix": "", "suffix": "kB"},
    title = {"text": "L1 Cache Size<br><span style='font-size:0.8em;color:gray'>"},
    #delta = {'reference': 400, 'relative': True},
    domain = {'row': 0, 'column': 1}))

    fig.add_trace(go.Indicator(
    mode = "number",
    value = 32,
    number = {"prefix": "", "suffix": "kB"},
    title = {"text": "L1 Cache Size<br><span style='font-size:0.8em;color:gray'>"},
    #delta = {'reference': 400, 'relative': True},
    domain = {'row': 1, 'column': 0}))

    fig.add_trace(go.Indicator(
    mode = "number",
    value = 32,
    number = {"prefix": "", "suffix": "kB"},
    title = {"text": "L1 Cache Size<br><span style='font-size:0.8em;color:gray'>"},
    #delta = {'reference': 400, 'relative': True},
    domain = {'row': 1, 'column': 1}))
    
    
    fig = grafana_layout(fig)
    #fig.update_layout(grid = {'rows': 2, 'columns': 2, 'pattern': "independent"})
    dict_fig = json.loads(io.to_json(fig))
    empty_dash["panels"].append(two_templates_one(dict_fig["data"], dict_fig["layout"]))
    '''

    hpcg_res = hpcg_benchmark.parse_hpcg_bench()
    stream_res = stream_benchmark.parse_stream_res()

    print("hpcg_res:", hpcg_res)
    print("stream_res:", stream_res)
    
    
    '''
    if(len(empty_dash["panels"]) != -1):
        json_dash_obj = get_dashboard_json(empty_dash, overwrite = False)
        #print(json_dash_obj)
        g_url = upload_to_grafana(json_dash_obj, grafana_server, grafana_api_key)
        generated = g_url['url']
        
    print("GENERATED:", generated)
    '''
            
    return generated


def sa():
    print("sa")

#if __name__ == "__main__":

    #main()
#    x = 1
